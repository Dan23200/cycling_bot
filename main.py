import sqlite3
from telebot import types
from utils import calculate_transmission
import telebot
# from database_bot import data
import sqlite3

bot = telebot.TeleBot("**********************************")

lists_with_buttons = ['–ü–µ—Ä–µ–¥–∞—á–∞ –≤ –¥—é–π–º–∞—Ö üö¥', '–û—Ç–∑—ã–≤ –æ –±–æ—Ç–µ ü§ñ‚Äç', '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞üßë‚Äçüíª']


@bot.message_handler(commands=['start'])
def user_greeting(message):
    connect = sqlite3.connect('bot.db')
    cursor = connect.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS reviews(
        users_id INTEGER
    )""")
    connect.commit()

    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ ID
    people_id = message.chat.id
    cursor.execute(f"SELECT users_id FROM reviews WHERE users_id = {people_id}")
    data = cursor.fetchone()
    if data is None:
        user_id = [message.chat.id]
        cursor.execute("INSERT INTO reviews VALUES(?);", user_id)
        connect.commit()
    else:
        bot.send_message(message.chat.id, '{0.first_name}, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤–Ω–æ–≤—å üòÅ'.format(message.from_user))

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton(lists_with_buttons[0])
    item2 = types.KeyboardButton(lists_with_buttons[1])
    item3 = types.KeyboardButton(lists_with_buttons[2])

    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!'.format(message.from_user), reply_markup=markup)
    print('–ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')


@bot.message_handler(commands=['delete'])
def delete(message):
    connect = sqlite3.connect('bot.db')
    cursor = connect.cursor()
    people_id = message.chat.id
    cursor.execute(f"DELETE FROM reviews WHERE users_id = {people_id}")
    bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å')


@bot.message_handler(content_types=['text'])
def front_chainring(message):
    if message.text == lists_with_buttons[0]:
        print('–†–∞—Å—á—ë—Ç –ø–µ—Ä–µ–¥–Ω–µ–π —à–µ—Å—Ç–µ—Ä—ë–Ω')
        bot.send_message(message.chat.id, '{0.first_name}!, –°–∫–∞–∂–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ –∑—É–±—Ü–æ–≤ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —à–µ—Å—Ç–µ—Ä–Ω–µ? ‚öôÔ∏è'.format(message.from_user))
        bot.register_next_step_handler(message, bask_chainring)
    elif message.text == lists_with_buttons[2]:
        print('–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞')
        bot.send_message(message.chat.id, 'Created by Danylo Kyrychenko üë®üèª')
    elif message.text == lists_with_buttons[1]:
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ü´£')
        bot.register_next_step_handler(message, feedback_register)


def feedback_register(message):
    connect = sqlite3.connect('bot.db')
    cursor = connect.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS feed(
        users_feedback TEXT
    )""")
    connect.commit()

    cursor.execute(f"SELECT users_feedback FROM feed")
    answers = cursor.fetchone()
    if answers:
        feedback = message.text
        cursor.execute("INSERT INTO feed VALUES(?);", (feedback,))
        connect.commit()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üëç\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /delete', reply_markup=markup)
        print('–°–æ—Ö—Ä–∞–Ω—ë–Ω')
    else:
        bot.send_message(message.chat.id, 'T–∞–∫–æ–π –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üëé')
    connect.commit()


def bask_chainring(message):
    global x
    x = message.text
    try:
        x = float(x)
    except ValueError:
        x = 0
    if x:
        bot.send_message(message.from_user.id, '–°–∫–∞–∂–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—É–±—Ü–æ–≤ –Ω–∞ –∑–∞–¥–Ω–µ–π —à–µ—Å—Ç–µ—Ä–Ω–µ ‚öôÔ∏è')
        bot.register_next_step_handler(message, formula_solution)
    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–µ —Ä–∞–≤–Ω–æ–µ 0 üò°')
        bot.register_next_step_handler(message, front_chainring)


def formula_solution(message):
    global y
    y = message.text
    result = calculate_transmission(front=float(x), back=float(y))
    try:
        y = float(y)
    except ValueError:
        y = 0
    if y:
        bot.send_message(message.from_user.id, "%.2f" % result)
    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–µ —Ä–∞–≤–Ω–∞ 0 üò°')
        bot.register_next_step_handler(message, front_chainring)


bot.polling(none_stop=True)
